// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  active
  dormant
  suspended
}

enum Gender {
  male
  female
  others
}

enum PaymentStatus {
  paid
  pending
  cancel
}

enum PaymentMethod {
  cash
  creditCard
  khqr
  leave
}

enum Status {
  active
  inactive
}

model Address {
  addressId  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cityId     String   @db.Uuid
  stateId    String   @db.Uuid
  country    String?
  location   String?
  latitude   Float?
  longitude  Float?
  customerId String?  @unique @db.Uuid
  employeeId String?  @unique @db.Uuid
  status     Status   @default(active)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  image    ImageAddress[]
  city     City           @relation(fields: [cityId], references: [cityId])
  state    State          @relation(fields: [stateId], references: [stateId])
  customer Customer?      @relation(fields: [customerId], references: [customerId])
  employee Employee?      @relation(fields: [employeeId], references: [employeeId])
}

model Attendance {
  attendanceId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId   String   @db.Uuid
  datetime     DateTime @default(now())
  note         String?
  status       Status   @default(active)
  employee     Employee @relation(fields: [employeeId], references: [employeeId])
}

model Auth {
  authId     String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String        @unique @db.VarChar(255)
  password   String        @db.VarChar(255)
  roleId     String        @db.Uuid
  employeeId String?       @unique @db.Uuid
  status     AccountStatus @default(active)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  token        Token[]
  cart         Cart[]
  logs         AuthLog[]
  notification Notification[]
  role         Role?          @relation(fields: [roleId], references: [roleId])
  employee     Employee?      @relation(fields: [employeeId], references: [employeeId])

  @@index([email])
}

model AuthLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authId       String   @db.Uuid
  method       String
  url          String
  status       Int
  responseTime Float
  ip           String
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  auth Auth @relation(fields: [authId], references: [authId])
}

model Cart {
  cartId    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authId    String?  @db.Uuid
  userId    String?  @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  status    Status   @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product    @relation(fields: [productId], references: [productId])
  auth    Auth?      @relation(fields: [authId], references: [authId])
  note    Cartnote[]
}

model Cartnote {
  cartnoteId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId     String @db.Uuid
  note       String
  status     Status @default(active)

  cart Cart @relation(fields: [cartId], references: [cartId])
}

model Category {
  categoryId   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  picture      String?
  categoryName String
  categoryCode String?
  memo         String?
  status       Status   @default(active)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products Product[]
}

model City {
  cityId    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stateId   String    @db.Uuid
  name      String
  addresses Address[]
  state     State     @relation(fields: [stateId], references: [stateId])

  @@unique([name, stateId])
}

model Customer {
  customerId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName  String
  lastName   String
  gender     Gender   @default(male)
  phone      String?
  status     Status   @default(active)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sales   Sale[]
  info    Customerinfo?
  address Address[]
}

model Customerinfo {
  customerinfoId String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId     String  @unique @db.Uuid
  picture        String?
  region         String?
  email          String? @unique
  address        String?
  country        String?
  note           String?
  status         Status  @default(active)

  customer Customer @relation(fields: [customerId], references: [customerId])
}

model Department {
  departmentId   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  departmentName String
  departmentCode String?
  memo           String?
  status         Status   @default(active)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  positions Position[]
  employees Employee[]
}

model Employee {
  employeeId   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeCode String?   @unique
  firstName    String
  lastName     String
  gender       Gender    @default(male)
  dob          DateTime?
  phone        String?   @unique
  positionId   String    @db.Uuid
  departmentId String    @db.Uuid
  salary       Decimal   @db.Decimal(10, 2)
  hiredDate    DateTime?
  status       Status    @default(active)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  auth        Auth?
  info        Employeeinfo?
  address     Address[]
  sales       Sale[]
  attendances Attendance[]
  payment     Payment[]
  position    Position?     @relation(fields: [positionId], references: [positionId])
  department  Department?   @relation(fields: [departmentId], references: [departmentId])
}

model Employeeinfo {
  employeeinfoId String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId     String  @unique @db.Uuid
  picture        String?
  region         String?
  email          String? @unique
  note           String?
  status         Status  @default(active)

  employee Employee @relation(fields: [employeeId], references: [employeeId])
}

model ImageAddress {
  imageId   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imageUrl  String
  imageType String?
  addressId String   @db.Uuid
  status    Status   @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address @relation(fields: [addressId], references: [addressId])
}

model Log {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  method       String
  url          String
  status       Int
  responseTime Float
  ip           String
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  notificationId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authId         String?  @db.Uuid
  userId         String?  @db.Uuid
  title          String
  content        String
  status         Status   @default(active)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  auth Auth? @relation(fields: [authId], references: [authId])
}

model Payment {
  paymentId     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId    String   @db.Uuid
  saleId        String   @db.Uuid
  reservationId String   @db.Uuid
  invoice       String?
  hash          String
  fromAccountId String
  toAccountId   String
  currency      String
  amount        Decimal  @db.Decimal(12, 2)
  externalRef   String
  status        Status   @default(active)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sale     Sale?    @relation(fields: [saleId], references: [saleId])
  employee Employee @relation(fields: [employeeId], references: [employeeId])
}

model Position {
  positionId   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  departmentId String     @db.Uuid
  positionName String?
  positionCode String?
  memo         String?
  status       Status     @default(active)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [departmentId])
  employees    Employee[]
}

model Product {
  productId    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productName  String
  productCode  String?
  categoryId   String         @db.Uuid
  picture      String?
  price        Decimal        @default(0.00) @db.Decimal(10, 2)
  discountRate Int            @default(0)
  status       Status         @default(active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  category     Category?      @relation(fields: [categoryId], references: [categoryId])
  stocks       Productstock[]
  saledetails  Saledetail[]
  cart         Cart[]
}

model Productstock {
  productstockId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId      String    @db.Uuid
  supplierId     String    @db.Uuid
  invNumber      String?
  productAdd     Int       @default(0)
  addPrice       Decimal   @default(0.00) @db.Decimal(12, 2)
  addDate        DateTime?
  memo           String?
  status         Status    @default(active)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  product        Product?  @relation(fields: [productId], references: [productId])
  supplier       Supplier? @relation(fields: [supplierId], references: [supplierId])
}

model Role {
  roleId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String @unique
  status Status @default(active)

  auths Auth[]
}

model Sale {
  saleId     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId String   @db.Uuid
  roomId     String   @db.Uuid
  customerId String   @db.Uuid
  saleDate   DateTime @default(now())
  amount     Decimal  @db.Decimal(12, 2)
  status     Status   @default(active)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee    Employee     @relation(fields: [employeeId], references: [employeeId])
  customer    Customer?    @relation(fields: [customerId], references: [customerId])
  saledetails Saledetail[]
  payment     Payment[]
}

model Saledetail {
  saledetailId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  saleId       String   @db.Uuid
  productId    String   @db.Uuid
  quantity     Int
  amount       Decimal  @db.Decimal(12, 2)
  status       Status   @default(active)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sale    Sale    @relation(fields: [saleId], references: [saleId])
  product Product @relation(fields: [productId], references: [productId])
}

model State {
  stateId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String @unique
  cities  City[]

  addresses Address[]
}

model Supplier {
  supplierId   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierName String
  companyName  String?
  phone        String?
  email        String?
  address      String?
  status       Status         @default(active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  stocks       Productstock[]
}

model Token {
  tokenId    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authId     String?  @db.Uuid
  userId     String?  @db.Uuid
  token      String   @unique
  deviceInfo String   @default("")
  ipAddress  String   @default("")
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  auth       Auth?    @relation(fields: [authId], references: [authId])

  @@index([token])
  @@index([expiresAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}
